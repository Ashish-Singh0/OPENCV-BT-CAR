Certainly! Here’s a detailed circuit diagram and connections for interfacing an Arduino Nano, L298N motor driver, and HC-05 Bluetooth module for controlling a car based on the provided code.

### Components Required

1. **Arduino Nano**
2. **L298N Motor Driver**
3. **HC-05 Bluetooth Module**
4. **DC Motors (2)**
5. **Battery Pack (suitable for your motors and Arduino)**
6. **Jumper Wires**

### Circuit Diagram

#### Connections

**1. Arduino Nano to L298N Motor Driver:**

- **ENA (Enable A) -** `D9`
- **IN1 (Input 1) -** `D8`
- **IN2 (Input 2) -** `D7`
- **ENB (Enable B) -** `D10`
- **IN3 (Input 3) -** `D11`
- **IN4 (Input 4) -** `D12`
- **GND (Ground) -** `GND`

**2. Arduino Nano to HC-05 Bluetooth Module:**

- **VCC -** `5V`
- **GND -** `GND`
- **TXD (HC-05) -** `RX (D0)`
- **RXD (HC-05) -** `TX (D1)`

**3. L298N Motor Driver to Motors:**

- **Motor A:**
  - **OUT1 -** Motor A Terminal 1
  - **OUT2 -** Motor A Terminal 2

- **Motor B:**
  - **OUT3 -** Motor B Terminal 1
  - **OUT4 -** Motor B Terminal 2

**4. L298N Motor Driver to Power Supply:**

- **12V (VCC) -** Positive terminal of the battery
- **GND -** Ground terminal of the battery and common ground with Arduino
- **5V (if needed) -** `5V` to `VCC` pin on the Arduino (usually not needed if Arduino is powered via USB or another 5V source)

### Circuit Breakout Diagram

```plaintext
   Arduino Nano          L298N Motor Driver         HC-05 Bluetooth
   -------------        ---------------------       ----------------
  (D9) ENA ------------- ENA
  (D8) IN1 ------------- IN1
  (D7) IN2 ------------- IN2
  (D10) ENB ------------ ENB
  (D11) IN3 ------------ IN3
  (D12) IN4 ------------ IN4
  (GND)  --------------- GND (Common Ground)
                       OUT1 --------------- Motor A Terminal 1
                       OUT2 --------------- Motor A Terminal 2
                       OUT3 --------------- Motor B Terminal 1
                       OUT4 --------------- Motor B Terminal 2
                       VCC  --------------- Positive Terminal of Battery
                       GND  --------------- Ground Terminal of Battery
                            --------------- GND (Common Ground)
  (5V)  VCC --------------- VCC
  (GND) GND --------------- GND
  (D0) RX ------------------ TXD (HC-05)
  (D1) TX ------------------ RXD (HC-05)
```

### Notes

1. **Power Supply:**
   - Ensure the motor driver is powered with a suitable voltage (usually 7-12V for L298N) that matches the voltage rating of your DC motors.
   - The Arduino can be powered via USB or an external 5V power source.

2. **Common Ground:**
   - Ensure all components share a common ground to avoid any communication issues.

3. **TX/RX Connections:**
   - When connecting TXD of the HC-05 to RX (D0) of the Arduino and RXD of the HC-05 to TX (D1) of the Arduino, ensure the serial communication does not interfere with Arduino programming. You may need to disconnect the HC-05 during uploading the code to the Arduino.

### Putting It All Together

- **Build the circuit as per the connections above.**
- **Upload the Arduino code provided previously to your Arduino Nano.**
- **Run the updated Python code to detect hand gestures and control the car.**

With these connections and code, you should be able to control your car using hand gestures detected by the OpenCV and `cvzone` library and transmitted via the HC-05 Bluetooth module.





CODES 



To control your car using finger gestures, you can define specific actions for different gestures detected by the hand detector. Here’s a guide on how you can map finger gestures to car controls:

### Mapping Finger Gestures to Car Controls

You can use different finger combinations to control the movements of the car. For example:
- **One finger up (index finger):** Move forward.
- **Two fingers up (index and middle fingers):** Move backward.
- **Three fingers up (index, middle, and ring fingers):** Turn left.
- **Four fingers up (index, middle, ring, and little fingers):** Turn right.
- **All fingers down:** Stop.

### Updated Python Code

Here’s the Python code with gesture controls mapped to different car movements:

```python
import cv2
import serial
from cvzone.HandTrackingModule import HandDetector

# Open the webcam
cap = cv2.VideoCapture(0)
detector = HandDetector(detectionCon=0.5, maxHands=1)

# Open the serial port (replace 'COM4' with your actual COM port)
bt = serial.Serial('COM4', 9600)  # Adjust the COM port and baud rate as needed

while True:
    ret, frame = cap.read()
    flip_both = cv2.flip(frame, 1)
    hands, frame = detector.findHands(frame)

    if not hands:
        print("nothing")
    else:
        hand1 = hands[0]
        fingers = detector.fingersUp(hand1)
        count = fingers.count(1)
        print(count)

        if count == 1:
            command = 'F'  # Forward
        elif count == 2:
            command = 'B'  # Backward
        elif count == 3:
            command = 'L'  # Left
        elif count == 4:
            command = 'R'  # Right
        else:
            command = 'S'  # Stop

        print(f"Command: {command}")
        bt.write(command.encode("utf-8"))

    cv2.imshow("FRAME", frame)

    if cv2.waitKey(1) & 0xFF == 27:  # ESC key to exit
        break

cap.release()
cv2.destroyAllWindows()
```

### Arduino Code

Here’s the Arduino code to interpret the commands and control the car:

```cpp
#define ENA 9
#define IN1 8
#define IN2 7
#define ENB 10
#define IN3 11
#define IN4 12

void setup() {
  Serial.begin(9600);  // Set the baud rate to match the HC-05 module
  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
}

void loop() {
  if (Serial.available() > 0) {
    char command = Serial.read();
    if (command == 'F') {  // Move forward
      digitalWrite(IN1, HIGH);
      digitalWrite(IN2, LOW);
      digitalWrite(IN3, HIGH);
      digitalWrite(IN4, LOW);
      analogWrite(ENA, 255);  // Adjust speed as necessary
      analogWrite(ENB, 255);  // Adjust speed as necessary
    } else if (command == 'B') {  // Move backward
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, HIGH);
      digitalWrite(IN3, LOW);
      digitalWrite(IN4, HIGH);
      analogWrite(ENA, 255);  // Adjust speed as necessary
      analogWrite(ENB, 255);  // Adjust speed as necessary
    } else if (command == 'L') {  // Turn left
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, HIGH);
      digitalWrite(IN3, HIGH);
      digitalWrite(IN4, LOW);
      analogWrite(ENA, 255);  // Adjust speed as necessary
      analogWrite(ENB, 255);  // Adjust speed as necessary
    } else if (command == 'R') {  // Turn right
      digitalWrite(IN1, HIGH);
      digitalWrite(IN2, LOW);
      digitalWrite(IN3, LOW);
      digitalWrite(IN4, HIGH);
      analogWrite(ENA, 255);  // Adjust speed as necessary
      analogWrite(ENB, 255);  // Adjust speed as necessary
    } else if (command == 'S') {  // Stop
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, LOW);
      digitalWrite(IN3, LOW);
      digitalWrite(IN4, LOW);
      analogWrite(ENA, 0);
      analogWrite(ENB, 0);
    }
  }
}
```

### Summary

- **One Finger (Index Finger Up):** Move forward.
- **Two Fingers (Index and Middle Fingers Up):** Move backward.
- **Three Fingers (Index, Middle, and Ring Fingers Up):** Turn left.
- **Four Fingers (Index, Middle, Ring, and Little Fingers Up):** Turn right.
- **No Fingers (All Fingers Down):** Stop.

By following these instructions, you should be able to control your car using specific finger gestures detected by the Hand Detector module and transmitted via the HC-05 Bluetooth module to your Arduino. If you encounter any issues, make sure your HC-05 is properly paired, and the COM port is correctly configured.



Terminal Setup and Bluetooth setup


Given that you're using the HC-05 Bluetooth module, here's a detailed guide to set up RFCOMM binding in Windows 11 and use it with an OpenCV project.

### Step-by-Step Guide for HC-05 Bluetooth Module

#### 1. Ensure Bluetooth is Enabled

Make sure Bluetooth is turned on in your system:
- Go to `Settings > Devices > Bluetooth & other devices`.
- Ensure the Bluetooth toggle is on.

#### 2. Pair the HC-05 Bluetooth Module

1. **Power the HC-05:**
   - Connect the HC-05 to a power source and ensure it is in pairing mode (LED should be blinking).

2. **Add Device:**
   - Go to `Settings > Devices > Bluetooth & other devices`.
   - Click on `Add Bluetooth or other device` and select `Bluetooth`.
   - Select `HC-05` from the list of available devices.
   - If prompted, enter the default pairing code `1234` or `0000`.

#### 3. Create a Virtual COM Port

1. **Open Device Manager:**
   - Press `Windows + X` and select `Device Manager`.

2. **Locate Bluetooth Device:**
   - Expand the `Bluetooth` section.
   - Find and right-click on `HC-05`, then select `Properties`.

3. **Configure COM Port:**
   - Go to the `Services` tab.
   - Check the box for `Serial Port (SPP)` or a similar service to create a virtual COM port.

4. **Confirm COM Port:**
   - Expand the `Ports (COM & LPT)` section in Device Manager.
   - Note the assigned COM port number (e.g., COM4).

#### 4. Communicate with HC-05 Using OpenCV

Now, let's write a Python script to communicate with the HC-05 and integrate it with OpenCV.

1. **Install pyserial:**
   - Open Command Prompt and run:
     ```sh
     pip install pyserial
     ```

2. **Example Script:**
   - This script reads data from the HC-05 and uses it in an OpenCV project.

   ```python
   import serial
   import cv2

   # Open the serial port
   ser = serial.Serial('COM4', 9600)  # Replace 'COM4' with your COM port and 9600 with your baud rate

   # Open the webcam (use the appropriate index for your camera)
   cap = cv2.VideoCapture(0)

   while True:
       # Read data from the HC-05
       if ser.in_waiting > 0:
           data = ser.readline().decode('utf-8').strip()
           print(f"Received: {data}")

       # Capture frame-by-frame (example OpenCV operation)
       ret, frame = cap.read()

       if ret:
           cv2.imshow('Frame', frame)

       if cv2.waitKey(1) & 0xFF == ord('q'):
           break

   # Release the capture and close the serial port
   cap.release()
   ser.close()
   cv2.destroyAllWindows()
   ```

### Summary

1. **Pair the HC-05 Bluetooth module.**
2. **Create a virtual COM port in Device Manager.**
3. **Use pyserial to communicate with the HC-05 in your OpenCV project.**

By following these steps, you should be able to set up RFCOMM binding with the HC-05 module on Windows 11 and use it in your OpenCV project. If you encounter any issues, make sure your HC-05 is properly powered and in range.


APP

Thonny

video link to download - https://youtu.be/QMBMWvn9DJc?si=hegFMOMyfKBR8w3k